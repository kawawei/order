const mongoose = require('mongoose');

const tableSchema = new mongoose.Schema({
  // 桌次基本信息 - Basic table information
  tableNumber: {
    type: String,
    required: [true, '請提供桌號'],
    trim: true
  },
  
  // 所屬商家 - Associated merchant
  merchant: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Merchant',
    required: [true, '桌次必須關聯商家']
  },
  
  // 桌次容量 - Table capacity
  capacity: {
    type: Number,
    required: [true, '請設定桌次容量'],
    min: [1, '桌次容量至少為 1 人'],
    max: [20, '桌次容量最多為 20 人']
  },
  
  // 桌次連結相關 - Table linking (QR Code functionality)
  uniqueCode: {
    type: String,
    required: false, // 由 pre-save 中間件生成 - Generated by pre-save middleware
    sparse: true // 稀疏索引，只索引非空值 - Sparse index, only index non-null values
  },
  customerUrl: {
    type: String,
    required: false // 由 pre-save 中間件生成 - Generated by pre-save middleware
  },
  qrCodeUrl: {
    type: String,
    default: '' // 存放二維碼圖片的 URL - QR code image URL
  },
  qrCodeDataUrl: {
    type: String,
    default: '' // 存放二維碼的 base64 數據 - QR code base64 data
  },
  
  // 是否啟用 - Enable/disable status
  isActive: {
    type: Boolean,
    default: true
  },
  
  // 當前使用信息 - Current session information
  currentSession: {
    sessionId: {
      type: String,
      default: null
    },
    startTime: {
      type: Date,
      default: null
    },
    customerCount: {
      type: Number,
      default: 0
    },
    customerName: {
      type: String,
      default: null
    }
  },
  
  // 桌次狀態 - Table status
  status: {
    type: String,
    enum: ['available', 'occupied', 'reserved'],
    default: 'available'
  }
}, {
  timestamps: true // 自動管理 createdAt 和 updatedAt - Auto-manage timestamps
});

// 建立複合索引 - Create compound indexes
tableSchema.index({ merchant: 1, tableNumber: 1 }, { unique: true }); // 同一商家的桌號不能重複 - Table numbers must be unique per merchant
tableSchema.index({ merchant: 1, status: 1 }); // 方便查詢特定商家的特定狀態桌次 - Query tables by merchant and status
tableSchema.index({ uniqueCode: 1 }, { unique: true, sparse: true }); // 快速查詢特定桌次，稀疏唯一索引 - Fast lookup by unique code, sparse unique index

// 生成唯一代碼的方法 - Generate unique code method
tableSchema.methods.generateUniqueCode = function() {
  const crypto = require('crypto');
  const timestamp = Date.now().toString(36);
  const randomString = crypto.randomBytes(6).toString('hex');
  const merchantId = this.merchant.toString ? this.merchant.toString() : this.merchant;
  return `${merchantId}_${this.tableNumber}_${timestamp}_${randomString}`;
};

// 生成客戶端 URL 的方法 - Generate customer URL method
tableSchema.methods.generateCustomerUrl = function(baseUrl = process.env.FRONTEND_URL || 'http://localhost:5173') {
  return `${baseUrl}/table/${this.uniqueCode}`;
};

// 更新桌次狀態的方法 - Update table status method
tableSchema.methods.updateStatus = function(newStatus, sessionData = {}) {
  this.status = newStatus;
  
  if (newStatus === 'occupied' && sessionData) {
    // 設置已入座狀態 - Set occupied status
    this.currentSession = {
      sessionId: sessionData.sessionId || new mongoose.Types.ObjectId().toString(),
      startTime: sessionData.startTime || new Date(),
      customerCount: sessionData.customerCount || 1,
      customerName: sessionData.customerName || null
    };
  } else if (newStatus === 'available') {
    // 清空會話信息 - Clear session information
    this.currentSession = {
      sessionId: null,
      startTime: null,
      customerCount: 0,
      customerName: null
    };
  } else if (newStatus === 'reserved' && sessionData) {
    // 設置預約狀態 - Set reserved status
    this.currentSession = {
      sessionId: sessionData.sessionId || new mongoose.Types.ObjectId().toString(),
      startTime: sessionData.startTime || new Date(),
      customerCount: sessionData.customerCount || 1,
      customerName: sessionData.customerName || null
    };
  }
  
  return this.save();
};

// 檢查桌次是否可用的方法 - Check if table is available
tableSchema.methods.isAvailable = function() {
  return this.isActive && this.status === 'available';
};

// 預保存中間件：生成唯一代碼和 URL - Pre-save middleware: generate unique code and URL
tableSchema.pre('save', function(next) {
  if (this.isNew || !this.uniqueCode) {
    this.uniqueCode = this.generateUniqueCode();
    this.customerUrl = this.generateCustomerUrl();
  }
  next();
});

// 虛擬屬性：桌次顯示名稱 - Virtual property: table display name
tableSchema.virtual('displayName').get(function() {
  return `桌號 ${this.tableNumber}`;
});

// 虛擬屬性：是否正在使用中 - Virtual property: is currently in use
tableSchema.virtual('isInUse').get(function() {
  return this.status === 'occupied' && this.currentSession.sessionId;
});

// 確保虛擬屬性在 JSON 中顯示 - Ensure virtual properties are included in JSON
tableSchema.set('toJSON', { virtuals: true });
tableSchema.set('toObject', { virtuals: true });

const Table = mongoose.model('Table', tableSchema);

module.exports = Table;
